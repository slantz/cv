<style>
    @keyframes bounce {
        0%, 100% {
            transform: scale(0);
        }

        50% {
            transform: scale(1);
        }
    }

    #pump {
        flex-direction: column;
        --main-color-blue: #F0F8FF;
        --compound-color-purple: #535399;
        --compound-color-light-purple: #ACACCC;
        --compound-color-beige: #FFD6B0;
        --compound-color-clam-shell: #CCB6AC;
        --shades-color-wet-asphalt: #3C3E40;
        --triad-monochromic-color-vivid-tangerine: #FF8F89;
    }

    .iteration {
        width: 100%;
    }

    .iteration__header {
        padding: 1em 0;
        margin: 0;
        border-bottom: 1px solid var(--compound-color-clam-shell);
    }

    .iteration__table {
        display: flex;
        flex-direction: row;
    }

    .header__column,
    .week {
        flex: 1;
        color: var(--shades-color-wet-asphalt);
    }

    .header__column,
    .week:not(:last-child) {
        border-right: 1px solid var(--compound-color-clam-shell);
    }

    .week {
        text-align: center;
    }

    .week.week_trained > h4 {
        display: flex;
        justify-content: space-around;
    }

    .week.week_trained:not(.week_fucked) > h4 {
        color: var(--compound-color-light-purple);
    }

    .week.week_trained.week_fucked > h4 {
        color: var(--triad-monochromic-color-vivid-tangerine);
    }

    .week.week_trained >h4 :last-child {
        display: none;
        padding: 0 5px 3px;
        border-radius: 4px;
        color: var(--main-color-blue);
    }

    .week.week_trained:not(.week_fucked) >h4 :last-child {
        background-color: var(--compound-color-light-purple);
    }

    .week.week_trained.week_fucked >h4 :last-child {
        background-color: var(--triad-monochromic-color-vivid-tangerine);
    }

    .week > h4:not(.week__holder__empty) {
        font-size: 1.2rem;
        border-bottom: 1px solid var(--compound-color-clam-shell);
    }

    .week__holder__empty {
        text-transform: capitalize;
        opacity: 0;
    }

    .week__content {
        padding: 0 20px;
        box-sizing: border-box;
        border-style: solid;
        border-color: var(--compound-color-clam-shell);
        border-width: 1px 0;
    }

    .week__content:last-child {
        border-bottom-width: 0;
    }

    .week__content > div {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
    }

    .week h4,
    .header__group-holder h4 {
        height: 40px;
        max-height: 40px;
        line-height: 40px;
        margin: 0;
    }

    .header__group-holder h4:not(.header__group-holder__empty) {
        text-transform: capitalize;
        font-size: 1.5rem;
        line-height: 1.5;
        border-style: solid;
        border-color: var(--compound-color-clam-shell);
        border-width: 1px 0;
        box-sizing: border-box;
    }

    .header__group-holder > div,
    .week__content > div {
        padding: 5px 0;
        box-sizing: border-box;
    }

    .week__content_standard .week__content__exercise-name,
    .week__content_standard button {
        display: none;
    }

    [data-tooltip] {
        position: relative;
        z-index: 2;
        cursor: pointer;
        max-width: 20px;
    }

    /* Hide the tooltip content by default */
    [data-tooltip]:before,
    [data-tooltip]:after {
        visibility: hidden;
        opacity: 0;
        pointer-events: none;
    }

    /* Position tooltip above the element */
    [data-tooltip]:before {
        position: absolute;
        bottom: 150%;
        left: 50%;
        margin-bottom: 5px;
        margin-left: -80px;
        padding: 7px;
        width: 160px;
        -webkit-border-radius: 3px;
        -moz-border-radius: 3px;
        border-radius: 3px;
        background-color: var(--compound-color-purple);
        color: #fff;
        content: attr(data-tooltip);
        text-align: center;
        font-size: 14px;
        line-height: 1.2;
    }

    /* Triangle hack to make tooltip look like a speech bubble */
    [data-tooltip]:after {
        position: absolute;
        bottom: 150%;
        left: 50%;
        margin-left: -5px;
        width: 0;
        border-top: 5px solid var(--compound-color-purple);
        border-right: 5px solid transparent;
        border-left: 5px solid transparent;
        content: " ";
        font-size: 0;
        line-height: 0;
    }

    /* Show tooltip content on hover */
    [data-tooltip]:hover:before,
    [data-tooltip]:hover:after {
        visibility: visible;
        opacity: 1;
    }

    .loader:after,
    .loader:before {
        content: "";
        display: block;
        position: absolute;
        z-index: 100;
        top: 50%;
        left: 50%;
        right: 0;
        bottom: 0;
        margin: -30px 0 0 -30px;
        width: 60px;
        height: 60px;
        border-radius: 50%;
        opacity: 0.6;
        background-color: rgba(83, 83, 153, 0.7);
        animation: bounce 2s ease-in-out infinite;
    }

    .loader:after {
        animation-delay: -1s;
    }

    @media screen and (max-width: 50em) {
        .header__column {
            display: none;
        }
        .iteration__table {
            flex-direction: column;
        }
        button {
            background-color: var(--main-color-blue);
        }
        .iteration__header,
        .week,
        .week > h4,
        .week > h4:not(.week__holder__empty),
        .header__column,
        .week:not(:last-child),
        .week__content {
            border: none;
            max-height: none;
        }

        .week.js-collapsed:not(.week_trained) > h4:not(.week__holder__empty) {
            display: block;
        }

        .week.week_trained.js-collapsed > h4:not(.week__holder__empty) {
            display: flex;
        }

        .week.js-collapsed .week__content,
        .week.js-collapsed .week__holder__empty {
            display: none;
        }

        .week.week_trained >h4 :last-child {
            display: inline;
        }

        .week > h4:not(.week__holder__empty) {
            padding: 10px 0;
            margin-bottom: 10px;
        }

        .iteration__header {
            text-align: center;
        }

        .week__holder__empty {
            opacity: 1;
        }

        .week h4,
        .header__group-holder h4 {
            background-color: var(--main-color-blue);
        }

        .week__content_standard .week__content__exercise-name,
        .week__content_standard button {
            display: inline;
        }
    }
</style>

<main id="pump"></main>

<script>
    // Initialize Firebase
    let config = {
        apiKey: "<%= env.FIREBASE_PUMP_APIKEY %>",
        authDomain: "<%= env.FIREBASE_PUMP_AUTHDOMAIN %>",
        databaseURL: "<%= env.FIREBASE_PUMP_DATABASEURL %>",
        projectId: "<%= env.FIREBASE_PUMP_PROJECTID %>",
        storageBucket: "<%= env.FIREBASE_PUMP_STORAGEBUCKET %>",
        messagingSenderId: "<%= env.FIREBASE_PUMP_MESSAGINGSENDERID %>"
    };
    firebase.initializeApp(config);
</script>

<script type="text/javascript">
    let promiseCallbacks,
        promises,
        pump,
        removeAllChildren,
        renderLoader,
        render,
        renderError,
        isMobileDevice;

    promiseCallbacks = {
        firebase: {
            resolve: function(){},
            reject: function(){}
        },
        data: {
            resolve: function(){},
            reject: function(){}
        }
    };

    promises = {
        firebase: new Promise(function(resolve, reject){
            promiseCallbacks.firebase.resolve = resolve;
            promiseCallbacks.firebase.reject = reject;
        }),
        data: new Promise(function(resolve, reject){
            promiseCallbacks.data.resolve = resolve;
            promiseCallbacks.data.reject = reject;
        })
    };

    isMobileDevice = (function(){
        let windowWidth = window.innerWidth
            || document.documentElement.clientWidth
            || document.body.clientWidth;

        return windowWidth <= 768;
    })();

    pump = document.querySelector("#pump");

    removeAllChildren = () => {
        while (pump.firstChild) {
            pump.removeChild(pump.firstChild);
        }
    };

    renderLoader = () => {
        let loader = document.createElement("section");

        removeAllChildren();
        loader.classList.add("loader");

        pump.appendChild(loader);
    };

    render = (success) => {
        let exercises = success[1].exercises,
            schedules = success[1].schedules;

        removeAllChildren();

        schedules.forEach((schedule, scheduleIndex) => {
            let iteration = document.createElement("section");
            let iterationHeader = document.createElement("h3");
            let separator = document.createElement("hr");

            iteration.classList.add("iteration");
            iterationHeader.classList.add("iteration__header");

            iterationHeader.setAttribute("id", `${schedule.type}-${schedule.id}-${scheduleIndex}`);
            iterationHeader.textContent = `Это ${schedule.id} итерация тренировок`;

            if (schedule.trained) {
                iterationHeader.style.color = "#ACACCC";
            }

            iteration.appendChild(iterationHeader);

            let iterationTable = document.createElement("div");

            iterationTable.classList.add("iteration__table")

            let headerColumn = document.createElement("div");

            headerColumn.classList.add("header__column");

            schedule.weeks[0].groups.forEach((group, groupIndex) => {
                let headerGroupHolder = document.createElement("div");
                let headerGroupHolderHeader = document.createElement("h4");
                let stubHeaderGroupHolderHeader = document.createElement("h4");

                headerGroupHolder.classList.add("header__group-holder");
                stubHeaderGroupHolderHeader.classList.add("header__group-holder__empty");

                headerGroupHolderHeader.textContent = `${group.groupId}`;

                if (groupIndex === 0) {
                    headerGroupHolder.appendChild(stubHeaderGroupHolderHeader);
                }
                headerGroupHolder.appendChild(headerGroupHolderHeader);

                group.exercises.forEach((exercise, exerciseIndex) => {
                    let headerExerciseHolder = document.createElement("div");
                    let currentExercise = exercises.filter(exer => exer.id === exercise.exerciseId)[0];
                    headerExerciseHolder.innerHTML = `<span>${currentExercise.title}</span>${currentExercise.hint !== "" ? "<button data-tooltip=\"" + currentExercise.hint + "\">?</button>" : ""}`;

                    headerGroupHolder.appendChild(headerExerciseHolder);
                });

                headerColumn.appendChild(headerGroupHolder);
            });

            iterationTable.appendChild(headerColumn);

            schedule.weeks.forEach((week, weekIndex) => {
                let weekHolder = document.createElement("div");
                let weekHeader = document.createElement("h4");
                weekHeader.textContent = `Week ${week.id}`;

                if (isMobileDevice) {
                    weekHolder.classList.add("js-collapsed");
                }

                weekHolder.appendChild(weekHeader);
                weekHolder.classList.add("week");

                if (week.groups.every(group => group.trained)) {
                    weekHolder.classList.add("week_trained");
                    weekHeader.textContent = "";

                    let weekHeaderTitle = document.createElement("span");
                    weekHeaderTitle.textContent = `Week ${week.id}`;

                    let weekHeaderTrainedLabel = document.createElement("span");
                    weekHeaderTrainedLabel.textContent = "trained";

                    weekHeader.appendChild(weekHeaderTitle);
                    weekHeader.appendChild(weekHeaderTrainedLabel);
                }
                else if (week.groups.every(group => group.fucked)) {
                    weekHolder.classList.add("week_trained");
                    weekHolder.classList.add("week_fucked");
                    weekHeader.textContent = "";

                    let weekHeaderTitle = document.createElement("span");
                    weekHeaderTitle.textContent = `Week ${week.id}`;

                    let weekHeaderTrainedLabel = document.createElement("span");
                    weekHeaderTrainedLabel.textContent = "fucked";

                    weekHeader.appendChild(weekHeaderTitle);
                    weekHeader.appendChild(weekHeaderTrainedLabel);
                }
                else if (week.groups.every(group => group.trained || group.fucked)) {
                    weekHolder.classList.add("week_trained");
                    weekHolder.classList.add("week_fucked");
                    weekHeader.textContent = "";

                    let weekHeaderTitle = document.createElement("span");
                    weekHeaderTitle.textContent = `Week ${week.id}`;

                    let weekHeaderTrainedLabel = document.createElement("span");
                    weekHeaderTrainedLabel.textContent = "trained / fucked";

                    weekHeader.appendChild(weekHeaderTitle);
                    weekHeader.appendChild(weekHeaderTrainedLabel);
                }

                week.groups.forEach((group, groupIndex) => {
                    let beforeGroupHolderEmptyElementForHeading = document.createElement("h4");
                    let groupHolder = document.createElement("div");

                    beforeGroupHolderEmptyElementForHeading.classList.add("week__holder__empty");
                    beforeGroupHolderEmptyElementForHeading.textContent = group.groupId;
                    groupHolder.classList.add("week__content");

                    if (group.trained) {
                        groupHolder.style.color = "#ACACCC";
                    }

                    if (group.fucked) {
                        groupHolder.style.color = "#FF8F89";
                    }

                    group.exercises.forEach((exercise, exerciseIndex) => {
                        let currentExercise = exercises.filter(exer => exer.id === exercise.exerciseId)[0];
                        let exerciseHolder = document.createElement("div");
                        let exerciseData = `<span>${exercise.repetitions} x ${exercise.times} (${exercise.weight === undefined ? "раз" : exercise.weight + currentExercise.unit})</span>`;

                        exerciseHolder.innerHTML = `<span class="week__content__exercise-name">${currentExercise.title}</span>${currentExercise.hint !== "" ? "<button data-tooltip=\"" + currentExercise.hint + "\">?</button>" : ""}${exerciseData}`;

                        if (!exercise.standard) {
                            exerciseHolder.classList.add("week__content_non-standard");
                        }
                        else {
                            exerciseHolder.classList.add("week__content_standard");
                        }

                        groupHolder.appendChild(exerciseHolder);
                    });

                    weekHolder.appendChild(beforeGroupHolderEmptyElementForHeading);
                    weekHolder.appendChild(groupHolder);
                });

                weekHeader.addEventListener("click", function(e) {
                    weekHolder.classList.toggle("js-collapsed");
                })

                iterationTable.appendChild(weekHolder);
            });

            iteration.appendChild(iterationTable);

            pump.appendChild(iteration);

            if (schedules.length !== scheduleIndex + 1) {
                pump.appendChild(separator);
            }
        });
    };

    renderError = (error) => {};

    renderLoader();

    Promise.all([promises.firebase, promises.data]).then(render).catch(renderError);

    firebase.auth().signInAnonymously().then(function(success) {
        promiseCallbacks.firebase.resolve(success);

        firebase.database().ref("/pump").once('value', function(snapshot){
            promiseCallbacks.data.resolve(snapshot.val());
        });
    }, function(error){
        promiseCallbacks.firebase.reject(error);
    });
</script>

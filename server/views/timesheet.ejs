<style>
    body {
        display: flex;
        background: #fff none scroll repeat 0 0;
        font-family: "Muli", Arial, sans-serif;
        color: #555;
        overflow-x: hidden;
        height: 100vh;
        min-height: 500px;
        margin: 0;
        padding: 0;
    }
    main,
    #timesheet-canvas {
        position: relative;
        flex: 1 0 auto;
        display: flex;
        flex-direction: column;
    }
    #timesheet-canvas:before {
        content: 'Выбери базу данных сначала!';
        position: absolute;
        top: 30px;
        left: calc(50% - 100px);
        font-size: 20px;
        font-weight: bold;
    }
    #timesheet-canvas.initialized:before {
        display: none;
    }
    main {
        padding: 30px 40px;
    }
    #timesheet-picker {
        margin-bottom: 30px;
        flex: 0 auto;
    }
</style>

<script type="text/javascript" src="https://www.gstatic.com/firebasejs/3.2.1/firebase.js"></script>
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>

<main id="timesheet">
    <div id="timesheet-picker">
        <% if (env) { %>
        <select name="heal_timesheet_picker" id="heal_timesheet_picker">
            <option value="">Базы данных:</option>
            <% for(var i = 0; i < env.TIMESHEET_ADMINS.length; i++) {%>
                <option value="<%= env.TIMESHEET_ADMINS[i] %>"><%= env.TIMESHEET_ADMINS[i].toString().toUpperCase().replace(/_/gi, ' ') %></option>
            <% } %>
        </select>
        <% } %>
    </div>
    <div id="timesheet-canvas"></div>
</main>

<script type="text/javascript">
    firebase.initializeApp({
        apiKey: "AIzaSyA_1gjVXHACTjokYtOOXynRqUet11mAj0Y",
        authDomain: "alexcv.firebaseapp.com",
        databaseURL: "https://alexcv-1e348.firebaseio.com/",
        storageBucket: "alexcv-1e348.appspot.com"
    });
</script>

<script type="text/javascript">
    let timesheetPicker = document.querySelector("#heal_timesheet_picker"),
        selectDBCallback,
        promiseCallbacks,
        promises,
        data;

    promiseCallbacks = {
        firebase: {
            resolve: function(){},
            reject: function(){}
        },
        google: {
            resolve: function(){},
            reject: function(){}
        },
        data: {
            resolve: function(){},
            reject: function(){}
        }
    };

    promises = {
        firebase: new Promise(function(resolve, reject){
            promiseCallbacks.firebase.resolve = resolve;
            promiseCallbacks.firebase.reject = reject;
        }),
        google: new Promise(function(resolve, reject){
            promiseCallbacks.google.resolve = resolve;
            promiseCallbacks.google.reject = reject;
        }),
        data: new Promise(function(resolve, reject){
            promiseCallbacks.data.resolve = resolve;
            promiseCallbacks.data.reject = reject;
        })
    };

    selectDBCallback = () => {
        var timesheet = document.querySelector('#timesheet-canvas');
        var container = document.getElementById('timesheet-canvas');
        var chart = new google.visualization.Timeline(container);
        var dataTable = new google.visualization.DataTable();

        if (!timesheet.classList.contains('initialized')) {
            timesheet.classList.add('initialized');
        }

        dataTable.addColumn({ type: 'string', id: 'Term' });
        dataTable.addColumn({ type: 'string', id: 'Name' });
        dataTable.addColumn({ type: 'date', id: 'Start' });
        dataTable.addColumn({ type: 'date', id: 'End' });

        reducedData = data[timesheetPicker.options[timesheetPicker.selectedIndex].value]
            .reduce(function(reduced, value){
                reduced.push([
                    value.med,
                    value.label,
                    new Date(value.startDate),
                    new Date(value.endDate)
                ])
                return reduced;
            }, []);

        dataTable.addRows(reducedData);
        chart.draw(dataTable);
    };

    data = {};

    timesheetPicker.setAttribute("disabled", "true");

    Promise.all([promises.firebase, promises.google, promises.data]).then(function(){
        timesheetPicker.removeAttribute("disabled");
    });

    google.charts.load("current", {packages:["timeline"]});

    firebase.auth().signInAnonymously().then(function(success) {
        promiseCallbacks.firebase.resolve();
    }, function(error){
        promiseCallbacks.firebase.reject();
    });

    google.charts.setOnLoadCallback(function(){
        promiseCallbacks.google.resolve();
    });

    timesheetPicker.addEventListener("change", selectDBCallback);

    Object.keys(timesheetPicker.options).forEach(function(optionIndex, index){
        let option = timesheetPicker.options[optionIndex];
        if (option.value !== '') {
            firebase.database().ref(`/${option.value}`).once('value', function(snapshot){
                data[option.value] = snapshot.val();
                if (index === timesheetPicker.options.length - 1) {
                    promiseCallbacks.data.resolve();
                }
            });
        }
    });
</script>


